<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: authzed/api/v0/developer.proto

namespace Authzed\Api\V0\LookupShareResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>authzed.api.v0.LookupShareResponse.LookupStatus</code>
 */
class LookupStatus
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_REFERENCE = 0;</code>
     */
    const UNKNOWN_REFERENCE = 0;
    /**
     * Generated from protobuf enum <code>FAILED_TO_LOOKUP = 1;</code>
     */
    const FAILED_TO_LOOKUP = 1;
    /**
     * Generated from protobuf enum <code>VALID_REFERENCE = 2;</code>
     */
    const VALID_REFERENCE = 2;
    /**
     * Generated from protobuf enum <code>UPGRADED_REFERENCE = 3;</code>
     */
    const UPGRADED_REFERENCE = 3;

    private static $valueToName = [
        self::UNKNOWN_REFERENCE => 'UNKNOWN_REFERENCE',
        self::FAILED_TO_LOOKUP => 'FAILED_TO_LOOKUP',
        self::VALID_REFERENCE => 'VALID_REFERENCE',
        self::UPGRADED_REFERENCE => 'UPGRADED_REFERENCE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(LookupStatus::class, \Authzed\Api\V0\LookupShareResponse_LookupStatus::class);

