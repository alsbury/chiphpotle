<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: authzed/api/v0/developer.proto

namespace Authzed\Api\V0\DeveloperError;

use UnexpectedValueException;

/**
 * Protobuf type <code>authzed.api.v0.DeveloperError.Source</code>
 */
class Source
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_SOURCE = 0;</code>
     */
    const UNKNOWN_SOURCE = 0;
    /**
     * Generated from protobuf enum <code>SCHEMA = 1;</code>
     */
    const SCHEMA = 1;
    /**
     * Generated from protobuf enum <code>RELATIONSHIP = 2;</code>
     */
    const RELATIONSHIP = 2;
    /**
     * Generated from protobuf enum <code>VALIDATION_YAML = 3;</code>
     */
    const VALIDATION_YAML = 3;
    /**
     * Generated from protobuf enum <code>CHECK_WATCH = 4;</code>
     */
    const CHECK_WATCH = 4;
    /**
     * Generated from protobuf enum <code>ASSERTION = 5;</code>
     */
    const ASSERTION = 5;

    private static $valueToName = [
        self::UNKNOWN_SOURCE => 'UNKNOWN_SOURCE',
        self::SCHEMA => 'SCHEMA',
        self::RELATIONSHIP => 'RELATIONSHIP',
        self::VALIDATION_YAML => 'VALIDATION_YAML',
        self::CHECK_WATCH => 'CHECK_WATCH',
        self::ASSERTION => 'ASSERTION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Source::class, \Authzed\Api\V0\DeveloperError_Source::class);

